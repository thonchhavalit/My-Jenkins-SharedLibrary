@Library("My-Jenkins-SharedLibrary") _

pipeline {
    agent any
     parameters {
        booleanParam(name: 'BUILD_DOCKER', defaultValue: true, description: 'Build Docker Image')
        booleanParam(name: 'DOCKER_DEPLOY', defaultValue: true, description: 'Docker Deploy')
        choice(name: "TEST_CHOICE", choices: ["production", "staging"], description: "Sample multi-choice parameter")
        string(name: 'REGISTRY_DOCKER', defaultValue: 'thonchhavalit', description: 'Registry')
        string(name: 'BUILD_CONTAINER_NAME', defaultValue: 'spring', description: 'container')
        // string(name: 'CONTAINER_NAME', defaultValue: 'automatex', description: 'container')
        string(name: 'CONTAINER_NAME', defaultValue: generateContainerName(), description: 'container')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker_tag')
        string(name: 'REPO_URL', defaultValue: 'https://github.com/MuyleangIng/swagger-gradle.git', description: 'Repository URL')
    }
    environment {
        TELEGRAM_BOT_TOKEN = '6141657258:AAHjBOPa8eFOhUS_M3FKq8RM8sNqP4JeRMw'
        TELEGRAM_CHAT_ID = '1322244413'
        NAME_FOR_USER="${params.NAME_FOR_USER}"
        //for docker 
        REGISTRY_DOCKER="${params.REGISTRY_DOCKER}"
        BUILD_CONTAINER_NAME="${params.BUILD_CONTAINER_NAME}"
        //REGISTRY_DOCKER = 'muyleangin' // Define your Docker registry
        //BUIDL_CONTAINER_NAME = 'reactjs' // Define your container name
        CONTAINER_NAME= "${params.CONTAINER_NAME}"
        DOCKER_TAG = "${params.DOCKER_TAG}" // Define your Docker tag
        //for mail
        MAIL_SEND_TO = 'thonchhavalit@gmail.com'
        //for port range 
        MIN_PORT = '8080'
        MAX_PORT = '8090'
        //for git link 
         REPO_URL="${params.REPO_URL}"
        //REPO_URL = 'https://gitlab.com/MuyleangIng1/reactjs'
        CREDENTIAL_GIT = 'password_for_gitlab'
        BRANCH = 'main'
    }
    stages {
        stage('Get Code from SCM') {
            steps {
                echo "TEST_CHOICE is ${TEST_CHOICE}"
                script {
                    gitHandler(
                        REPO_URL,
                        CREDENTIAL_GIT,
                        BRANCH,
                        TELEGRAM_BOT_TOKEN,
                        TELEGRAM_CHAT_ID
                    )
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building Images for deploying"
                script {
                    def dockerfileContent = '''
                        FROM gradle:8.4-jdk17-alpine As builder
                        #ENV SPRING_PROFILES_ACTIVE=native
                        WORKDIR /app
                        COPY . .

                        # Build the application
                        RUN gradle build --no-daemon
                        EXPOSE 8080
                        FROM openjdk:17
                        ## Copy the jar file from the build/libs directory to the Docker image
                        COPY --from=builder /app/build/libs/*-SNAPSHOT.jar app.jar
                        ENTRYPOINT ["java","-jar","/app.jar"]

                    '''

                    // Write the Dockerfile content to a file
                    writeFile file: 'Dockerfile', text: dockerfileContent

                    // Build the Docker image using the specified Dockerfile
                    def dockerImage = docker.build("nextjs", "-f Dockerfile .")

                    gradleBuild(REGISTRY_DOCKER, BUILD_CONTAINER_NAME, DOCKER_TAG, MAIL_SEND_TO, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
                }
            }
        }
        stage('Push image to registry') {
            steps {
                script {
            withCredentials([usernamePassword(credentialsId: 'docker_hub_access_account', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                sh "docker login -u $USER -p $PASS"
                sh "docker push ${REGISTRY_DOCKER}/${BUILD_CONTAINER_NAME}:${DOCKER_TAG}"
                     }
                }
             }
        }
        stage('Pull image from registry - Agent 1') {
            // agent { label 'worker_1_SSH' }
            steps {
                script {
                     withCredentials([usernamePassword(credentialsId: 'jenkins_dockerhub_token', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                sh "docker login -u $USER -p $PASS"
                sh "docker pull ${REGISTRY_DOCKER}/${BUILD_CONTAINER_NAME}:${DOCKER_TAG}"
                     }
                }
             }
            }
        

        // stage('Another Stage - Agent 2') {
        //     // agent { label 'worker_2_SSH' }
        //     steps {
        //         script {
        //             withCredentials([usernamePassword(credentialsId: 'docker_hub_access_account', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
        //         sh "docker login -u $USER -p $PASS"
        //         sh "docker pull ${REGISTRY_DOCKER}/${BUILD_CONTAINER_NAME}:${DOCKER_TAG}"
        //              }
        //         }
        //     }
        // }
        stage('Deploy Docker- Agent 1') {
            // agent { label 'worker_1_SSH' }
            steps {
                script {
                    gradleDeploy(
                        MIN_PORT,
                        MAX_PORT,
                        REGISTRY_DOCKER,
                        BUILD_CONTAINER_NAME,
                        CONTAINER_NAME,
                        DOCKER_TAG,
                        MAIL_SEND_TO,
                        TELEGRAM_BOT_TOKEN,
                        TELEGRAM_CHAT_ID
                    )
                }
            }
        }
        // stage('Deploy Docker- Agent 2') {
        //     agent { label 'worker_2_SSH' }
        //     steps {
        //         script {
        //             gradleDeploy(
        //                 MIN_PORT,
        //                 MAX_PORT,
        //                 REGISTRY_DOCKER,
        //                 BUILD_CONTAINER_NAME,
        //                 CONTAINER_NAME,
        //                 DOCKER_TAG,
        //                 MAIL_SEND_TO,
        //                 TELEGRAM_BOT_TOKEN,
        //                 TELEGRAM_CHAT_ID
        //             )
        //         }
        //     }
        // }
        // stage('Deploy Docker-master') {
        //     steps {
        //         script {
        //             gradleDeploy(
        //                 MIN_PORT,
        //                 MAX_PORT,
        //                 REGISTRY_DOCKER,
        //                 BUILD_CONTAINER_NAME,
        //                 CONTAINER_NAME,
        //                 DOCKER_TAG,
        //                 MAIL_SEND_TO,
        //                 TELEGRAM_BOT_TOKEN,
        //                 TELEGRAM_CHAT_ID
        //             )

        //         }
        //     }
        // }
    }
}
def generateContainerName() {
    // Generate a dynamic default value, for example, based on a timestamp or a random value
   return "automatex-${new Date().getTime()}"
}
